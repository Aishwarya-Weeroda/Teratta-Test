name: Development Distribution

on:
  push:
    branches:
      - master
      - base-configurations

jobs:
  # dev-distribution:
  #   runs-on: ubuntu-latest
  #   name: Development Distribution
  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@v2
  #   - uses: actions/setup-node@master

  #   - name: Install node modules
  #     run: |
  #       yarn install
  #   - name: Run test
  #     run: |
  #       yarn test
  #   - name: Cache Gradle Wrapper
  #     uses: actions/cache@v2
  #     with:
  #       path: ~/.gradle/wrapper
  #       key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}

  #   - name: Cache Gradle Dependencies
  #     uses: actions/cache@v1
  #     with:
  #       path: ~/.gradle/caches
  #       key: ${{ runner.os }}-gradle-caches-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}
  #       restore-keys: |
  #         ${{ runner.os }}-gradle-caches-
  #   - name: Make Gradlew Executable
  #     run: cd android && chmod +x ./gradlew

  #   - name: Build Android Release
  #     run: |
  #       cd android && ./gradlew assembleRelease --no-daemon

  #   - name: Upload Artifact
  #     uses: actions/upload-artifact@v1
  #     with:
  #       name: app-release.apk
  #       path: android/app/build/outputs/apk/release/
  
  #   - name: Distribute app via Firebase App Distribution
  #     env:
  #         firebaseToken: ${{ secrets.FIREBASE_TOKEN }}
  #         firebaseGroups: ${{ secrets.FIREBASE_GROUP_DEV }}
  #         firebaseAppId: ${{ secrets.FIREBASE_APP_ID }}
  #         notes: ${{ github.event.head_commit.message }}
  #     run: |
  #       yarn global add firebase-tools
  #       export PATH="$(yarn global bin):$PATH"
  #       firebase \
  #         appdistribution:distribute android/app/build/outputs/apk/release/app-release.apk \
  #         --app $firebaseAppId \
  #         --release-notes "$notes" \
  #         --groups "$firebaseGroups" \
  #         --token "$firebaseToken"
  
  build_ios:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js
      uses: actions/setup-node@v1
      with:
        node-version: 14.x
    - run: yarn install
    - run: xcode-select -p
    - run: pod install
      working-directory: ios
      name: Install pod dependencies
    - name: Build iOS (debug)
      run: "xcodebuild \
        -workspace ios/Terata.xcworkspace \
        -scheme Terata \
        clean archive \
        -sdk iphoneos \
        -configuration Debug \
        -UseModernBuildSystem=NO \
        -archivePath $PWD/Terata \
        CODE_SIGNING_ALLOWED=NO"
